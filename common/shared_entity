// DO NOT EDIT THIS FILE UNLESS YOU'RE IN THE 'common' dir

package XXX

import (
	"strings"

	. "github.com/xregistry/server/common"
)

type Entity struct {
	EntityExtensions

	Registry  *Registry `json:"-"`
	DbSID     string    // Entity's SID
	Plural    string
	Singular  string
	UID       string         // Entity's UID
	Object    map[string]any `json:"-"`
	NewObject map[string]any `json:"-"` // updated version, save() will store

	// These were added just for convenience and so we can use the same
	// struct for traversing the SQL results
	Type     int    // ENTITY_REGISTRY(0)/GROUP(1)/RESOURCE(2)/VERSION(3)/...
	Path     string // [GROUPS/GID[/RESOURCES/RID[/versions/vID]]]
	Abstract string // [GROUPS[/RESOURCES[/versions]]]
	EpochSet bool   `json:"-"` // Has epoch changed this tx?
	ModSet   bool   `json:"-"` // Has modifiedat changed this tx?
	Self     any    `json:"-"` // ptr to typed Entity (e.g. *Group)

	// Save these values in memory so we only need to get them once
	GroupModel    *GroupModel    `json:"-"` // gModel if it's not a Registry
	ResourceModel *ResourceModel `json:"-"` // If Res,Ver,Meta save rmModel

	// Debugging
	NewObjectStack []string `json:"-"` // stack when NewObj created via Ensure

	// Extensions to 'common'
	stuff map[string]any
}

func (e *Entity) GetStuff(key string) (any, bool) {
	if e.stuff == nil {
		return nil, false
	}
	val, ok := e.stuff[key]
	return val, ok
}

func (e *Entity) GetStuffAsString(key string) string {
	val, ok := e.GetStuff(key)
	if !ok {
		return ""
	}
	return val.(string)
}

func (e *Entity) SetStuff(key string, val any) {
	if e.stuff == nil {
		e.stuff = map[string]any{}
	}
	e.stuff[key] = val
}

type Registry struct {
	Entity
	Capabilities *Capabilities `json"-"`
	Model        *Model        `json:"-"`
}

type Group struct {
	Entity
	Registry *Registry
}

type Resource struct {
	Entity
	Group *Group
}

type Meta struct {
	Entity
	Resource *Resource
}

type Version struct {
	Entity
	Resource *Resource
}

// This allows for us to choose the order and define custom logic per prop
var OrderedSpecProps = []*Attribute{
	{
		Name:     "specversion",
		Type:     STRING,
		ReadOnly: true,
		Required: true,

		internals: &AttrInternals{
			types:     StrTypes(ENTITY_REGISTRY),
			dontStore: true,
		},
	},
	{
		Name:      "id",
		Type:      STRING,
		Immutable: true,
		Required:  true,

		internals: &AttrInternals{
			types:        "", // Yes even ENTITY_RESOURCE
			xrefrequired: true,
		},
	},
	{
		Name:      "versionid",
		Type:      STRING,
		Immutable: true,
		Required:  true,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_VERSION),
		},
	},
	{
		Name:      "self",
		Type:      URL,
		ReadOnly:  true,
		Immutable: true,
		Required:  true,

		internals: &AttrInternals{
			types:        "", // Yes even ENTITY_RESOURCE
			dontStore:    true,
			xrefrequired: true,
		},
	},
	/*
		{
			Name:           "shortself",
			Type:           URL,
			ReadOnly:       true,
			Immutable: true,

			internals: &AttrInternals{
				types:     "",
				dontStore: true,
				xrefrequired: true,
			},
		},
	*/
	{
		Name:      "xid",
		Type:      XID,
		ReadOnly:  true,
		Immutable: true,
		Required:  true,

		internals: &AttrInternals{
			types:        "",
			dontStore:    true,
			xrefrequired: true,
		},
	},
	{
		Name: "xref",
		Type: URL,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_META),
		},
	},
	{
		Name:     "epoch",
		Type:     UINTEGER,
		ReadOnly: true,
		Required: true,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_META, ENTITY_VERSION),
		},
	},
	{
		Name: "name",
		Type: STRING,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_VERSION),
		},
	},
	{
		Name:     "isdefault",
		Type:     BOOLEAN,
		ReadOnly: true,
		Required: true,
		Default:  false,

		internals: &AttrInternals{
			types:     StrTypes(ENTITY_VERSION),
			dontStore: true,
		},
	},
	{
		Name: "description",
		Type: STRING,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_VERSION),
		},
	},
	{
		Name: "documentation",
		Type: URL,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_VERSION),
		},
	},
	{
		Name: "icon",
		Type: URL,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_VERSION),
		},
	},
	{
		Name: "labels",
		Type: MAP,
		Item: &Item{
			Type: STRING,
		},

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_VERSION),
		},
	},
	{
		Name:     "createdat",
		Type:     TIMESTAMP,
		Required: true,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_META, ENTITY_VERSION),
		},
	},
	{
		Name:     "modifiedat",
		Type:     TIMESTAMP,
		Required: true,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_META, ENTITY_VERSION),
		},
	},
	{
		Name: "$extensions",
		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY),
		},
	},
	{
		Name: "capabilities",
		Type: OBJECT, // This ensures the client sent a map
		Attributes: Attributes{
			"*": &Attribute{
				Name: "*",
				Type: ANY,
			},
		},

		internals: &AttrInternals{
			types:     StrTypes(ENTITY_REGISTRY),
			dontStore: true,
		},
	},
	{
		Name:     "model",
		Type:     OBJECT,
		ReadOnly: true,
		Attributes: Attributes{
			"*": &Attribute{
				Name: "*",
				Type: ANY,
			},
		},

		internals: &AttrInternals{
			types:     StrTypes(ENTITY_REGISTRY),
			dontStore: true,
		},
	},
	{
		Name: "modelsource",
		Type: OBJECT,
		Attributes: Attributes{
			"*": &Attribute{
				Name: "*",
				Type: ANY,
			},
		},

		internals: &AttrInternals{
			types: StrTypes(ENTITY_REGISTRY),
		},
	},
	{
		Name:     "readonly",
		Type:     BOOLEAN,
		ReadOnly: true,
		Required: true,
		Default:  false,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_META),
		},
	},
	{
		Name: "compatibility",
		Type: STRING,
		Enum: []any{"none", "backward", "backward_transitive", "forward",
			"forward_transitive", "full", "full_transitive"},
		Strict:   PtrBool(false),
		Required: true,
		Default:  "none",

		internals: &AttrInternals{
			types: StrTypes(ENTITY_META),
		},
	},
	{
		Name:   "compatibilityauthority",
		Type:   STRING,
		Enum:   []any{"external", "server"},
		Strict: PtrBool(false),

		internals: &AttrInternals{
			types: StrTypes(ENTITY_META),
		},
	},
	{
		Name: "deprecated",
		Type: OBJECT,
		Attributes: Attributes{
			"effective": &Attribute{
				Type: TIMESTAMP,
			},
			"removal": &Attribute{
				Type: TIMESTAMP,
			},
			"alternative": &Attribute{
				Type: URL,
			},
			"documentation": &Attribute{
				Type: URL,
			},
			"*": &Attribute{
				Type: ANY,
			},
		},

		internals: &AttrInternals{
			types: StrTypes(ENTITY_META),
		},
	},
	{
		Name:     "ancestor",
		Type:     STRING,
		Required: true,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_VERSION),
		},
	},
	{
		Name: "contenttype",
		Type: STRING,

		internals: &AttrInternals{
			types:      StrTypes(ENTITY_VERSION),
			httpHeader: "Content-Type",
		},
	},
	{
		Name: "$extensions",
		internals: &AttrInternals{
			types: StrTypes(ENTITY_GROUP, ENTITY_RESOURCE, ENTITY_META, ENTITY_VERSION),
		},
	},
	{
		Name: "$space",
		internals: &AttrInternals{
			types: "",
		},
	},
	// For the $RESOURCE ones, make sure to use attr.Clone("newname")
	// when the $RESOURCE is substituded with the Resource's singular
	// name. Otherwise you'll be updating this shared entry.
	{
		Name: "$RESOURCEurl",
		Type: URL,
		internals: &AttrInternals{
			types: StrTypes(ENTITY_VERSION),
		},
	},
	{
		Name: "$RESOURCEproxyurl",
		Type: URL,
		internals: &AttrInternals{
			types: StrTypes(ENTITY_VERSION),
		},
	},
	{
		Name: "$RESOURCE",
		Type: ANY,

		internals: &AttrInternals{
			types:           StrTypes(ENTITY_VERSION),
			alwaysSerialize: true, // Will always be missing, so need this
		},
	},
	{
		Name: "$RESOURCEbase64",
		Type: STRING,
		internals: &AttrInternals{
			types: StrTypes(ENTITY_VERSION),
		},
	},
	{
		Name: "$space",
		internals: &AttrInternals{
			types: "",
		},
	},
	{
		Name:      "metaurl",
		Type:      URL,
		ReadOnly:  true,
		Immutable: true,
		Required:  true,

		internals: &AttrInternals{
			types:     StrTypes(ENTITY_RESOURCE),
			dontStore: true,
		},
	},
	{
		Name: "meta",
		Type: OBJECT,
		Attributes: Attributes{
			"*": &Attribute{
				Name: "*",
				Type: ANY,
			},
		},
		internals: &AttrInternals{
			types: StrTypes(ENTITY_RESOURCE),
		},
	},
	{
		Name: "$space",
		internals: &AttrInternals{
			types: "",
		},
	},
	{
		Name:     "defaultversionid",
		Type:     STRING,
		Required: true,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_META),
		},
	},
	{
		Name:     "defaultversionurl",
		Type:     URL,
		ReadOnly: true,
		Required: true,

		internals: &AttrInternals{
			types:     StrTypes(ENTITY_META),
			dontStore: true,
		},
	},
	{
		Name:     "defaultversionsticky",
		Type:     BOOLEAN,
		Required: true,
		Default:  false,

		internals: &AttrInternals{
			types: StrTypes(ENTITY_META),
		},
	},
	{
		Name: "$space",
		internals: &AttrInternals{
			types: "",
		},
	},
	{
		Name: "$COLLECTIONS", // Implicitly creates the url and count ones
		Type: MAP,
		Item: &Item{
			Type: OBJECT,
			Attributes: Attributes{
				"*": {
					Type: ANY,
				},
			},
		},
		internals: &AttrInternals{
			types:     StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_RESOURCE),
			dontStore: true,
		},
	},
}

var SpecProps = map[string]*Attribute{}
var CollectionsURLAttr *Attribute
var CollectionsCountAttr *Attribute
var CollectionsAttr *Attribute

func init() {
	// Load map via lower-case version of prop name
	for _, sp := range OrderedSpecProps {
		SpecProps[sp.Name] = sp
	}

	for _, sp := range PropsFuncs {
		prop := SpecProps[sp.Name]
		PanicIf(prop == nil, "can't be nil")

		if sp.internals != nil {
			if prop.internals == nil {
				prop.internals = &AttrInternals{}
			}
			prop.internals.getFn = sp.internals.getFn
			prop.internals.checkFn = sp.internals.checkFn
			prop.internals.updateFn = sp.internals.updateFn
		}
	}

	CollectionsAttr = SpecProps["$COLLECTIONS"]

	CollectionsURLAttr = &Attribute{
		Name:      "$COLLECTIONSurl",
		Type:      URL,
		ReadOnly:  true,
		Immutable: true,
		Required:  true,
		internals: &AttrInternals{
			types:     StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_RESOURCE),
			dontStore: true,
		},
	}

	CollectionsCountAttr = &Attribute{
		Name:     "$COLLECTIONScount",
		Type:     UINTEGER,
		ReadOnly: true,
		Required: true,
		internals: &AttrInternals{
			types:     StrTypes(ENTITY_REGISTRY, ENTITY_GROUP, ENTITY_RESOURCE),
			dontStore: true,
		},
	}
}

func StrTypes(types ...int) string {
	res := strings.Builder{}
	for _, eType := range types {
		res.WriteByte('0' + byte(eType))
	}
	return res.String()
}

func (e *Entity) GetModels() (*GroupModel, *ResourceModel) {
	if e.GroupModel != nil {
		return e.GroupModel, e.ResourceModel
	}

	if e.Type == ENTITY_REGISTRY || e.Type == ENTITY_MODEL {
		return nil, nil
	}

	e.GroupModel, e.ResourceModel = AbstractToModels(e.Registry, e.Abstract)
	return e.GroupModel, e.ResourceModel
}
